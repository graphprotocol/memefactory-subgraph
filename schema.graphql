enum RegEntryStatus {
  regEntry_status_challengePeriod
  regEntry_status_commitPeriod
  regEntry_status_revealPeriod
  regEntry_status_blacklisted
  regEntry_status_whitelisted
}

interface RegEntry {
  id: ID!
  regEntry_address: String
  regEntry_version: BigInt
  regEntry_status: RegEntryStatus
  regEntry_creator: User
  regEntry_deposit: BigInt
  regEntry_createdOn: BigInt
  regEntry_challengePeriodEnd: BigInt
  challenge_challenger: User
  challenge_createdOn: BigInt
  challenge_comment: String
  # Jannis: Source?
  # challenge_votingToken: String
  challenge_rewardPool: BigInt
  challenge_commitPeriodEnd: BigInt
  challenge_revealPeriodEnd: BigInt
  challenge_votesFor: BigInt
  challenge_votesAgainst: BigInt
  challenge_votesTotal: BigInt
  challenge_claimedRewardOn: String
  # Jannis: How to represent?
  # challenge_votes: [ChallengeVotes]
}

# Possible representation for challenge votes:
#
# type ChallengeVotes {
#   voter: ID
#   vote: ID
# }

enum VoteOption {
  voteOption_noVote
  voteOption_voteFor
  voteOption_voteAgainst
}

# type Vote {
#   id: ID!
#   vote_createdOn: BigInt
#   vote_secretHash: Bytes
#   vote_option: VoteOption
#   vote_amount: BigInt
#   vote_revealedOn: BigInt
#   vote_claimedRewardOn: BigInt
#   # Jannis: Source?
#   # vote_reward: Int
# }

type MemeVote {
  id: ID!
  vote_createdOn: BigInt
  vote_secretHash: Bytes
  vote_option: VoteOption
  vote_amount: BigInt
  vote_revealedOn: BigInt
  vote_claimedRewardOn: BigInt
  vote_meme: String

}

type ParamChangeVote {
  id: ID!
  vote_createdOn: BigInt
  vote_secretHash: Bytes
  vote_option: VoteOption
  vote_amount: BigInt
  vote_revealedOn: BigInt
  vote_claimedRewardOn: BigInt
}

type Meme implements RegEntry {
  id: ID!
  regEntry_address: String
  regEntry_version: BigInt
  regEntry_status: RegEntryStatus
  regEntry_creator: User
  regEntry_deposit: BigInt
  regEntry_createdOn: BigInt
  regEntry_challengePeriodEnd: BigInt
  challenge_challenger: User
  challenge_createdOn: BigInt
  challenge_comment: String
  # Jannis: Source?
  # challenge_votingToken: String
  challenge_rewardPool: BigInt
  challenge_commitPeriodEnd: BigInt
  challenge_revealPeriodEnd: BigInt
  challenge_votesFor: BigInt
  challenge_votesAgainst: BigInt
  challenge_votesTotal: BigInt
  challenge_claimedRewardOn: String
  challenge_votes: @derivedFrom(field: "vote_meme")

  # Jannis: How to represent?
  # challenge_availableVoteAmount(voter: ID!): BigInt

  # Jannis: Source?
  # meme_title: String
  # Jannis: Source?
  # meme_number: Int
  meme_metaHash: Bytes
  # Jannis: Source?
  # meme_imageHash: String
  meme_totalSupply: BigInt
  meme_totalMinted: BigInt
  meme_tokenIdStart: BigInt
  # Jannis: Source?
  # meme_totalTradeVolume: Int
  # Jannis: Source?
  # meme_totalTradeVolumeRank: Int
  # Jannis: How to represent?
  # meme_ownedMemeTokens(owner: String): [MemeToken]
  # Jannis: Source?
  # meme_tags: [Tag]
}

# Possible representation for tags:
#
# type Tag {
#   tag_id: ID
#   tag_name: String
# }

# Possible representation for meme tokens:
#
# type MemeToken {
#   memeToken_tokenId: ID
#   memeToken_number: Int
#   memeToken_owner: User
#   memeToken_meme: Meme
# }

# Possible representation for meme auction states:
#
# enum MemeAuctionStatus {
#   memeAuction_status_active
#   memeAuction_status_canceled
#   memeAuction_status_done
# }

# Possible representation for meme auctions:
#
# type MemeAuction {
#   memeAuction_address: ID
#   memeAuction_seller: User
#   memeAuction_buyer: User
#   memeAuction_startPrice: Int
#   memeAuction_endPrice: Int
#   memeAuction_duration: Int
#   memeAuction_startedOn: String
#   memeAuction_boughtOn: String
#   memeAuction_status: MemeAuctionStatus
#   memeAuction_memeToken: MemeToken
# }

type ParamChange implements RegEntry {
  id: ID!
  regEntry_address: String
  regEntry_version: BigInt
  regEntry_status: RegEntryStatus
  regEntry_creator: User
  regEntry_deposit: BigInt
  regEntry_createdOn: BigInt
  regEntry_challengePeriodEnd: BigInt
  challenge_challenger: User
  challenge_createdOn: BigInt
  challenge_comment: String
  # Jannis: Source?
  # challenge_votingToken: String
  challenge_rewardPool: BigInt
  challenge_commitPeriodEnd: BigInt
  challenge_revealPeriodEnd: BigInt
  challenge_votesFor: BigInt
  challenge_votesAgainst: BigInt
  challenge_votesTotal: BigInt
  challenge_claimedRewardOn: String
  # Jannis: How to represent?
  # challenge_votes: [ChallengeVotes]

  paramChange_db: String
  paramChange_key: String
  paramChange_value: Int
  paramChange_valueType: Int
  paramChange_originalValue: Int
  paramChange_appliedOn: String
}

type User {
  id: ID!
  # Ethereum address of an user
  user_address: ID!

  # Jannis: Source for all fields below?
  ## Total number of memes submitted by user
  #user_totalCreatedMemes: Int
  ## Total number of memes submitted by user, which successfully got into TCR
  #user_totalCreatedMemesWhitelisted: Int
  ## Largest sale creator has done with his newly minted meme
  #user_creatorLargestSale: MemeAuction
  ## Position of a creator in leaderboard according to user_totalCreatedMemesWhitelisted
  #user_creatorRank: Int
  ## Amount of meme tokenIds owned by user
  #user_totalCollectedTokenIds: Int
  ## Amount of unique memes owned by user
  #user_totalCollectedMemes: Int
  ## Largest auction user sold, in terms of price
  #user_largestSale: MemeAuction
  ## Largest auction user bought into, in terms of price
  #user_largestBuy: MemeAuction
  ## Amount of challenges user created
  #user_totalCreatedChallenges: Int
  ## Amount of challenges user created and ended up in his favor
  #user_totalCreatedChallengesSuccess: Int
  ## Total amount of DANK token user received from challenger rewards
  #user_challengerTotalEarned: Int
  ## Total amount of DANK token user received from challenger rewards
  #user_challengerRank: Int
  ## Amount of different votes user participated in
  #user_totalParticipatedVotes: Int
  ## Amount of different votes user voted for winning option
  #user_totalParticipatedVotesSuccess: Int
  ## Amount of DANK token user received for voting for winning option
  #user_voterTotalEarned: Int
  ## Position of voter in leaderboard according to user_voterTotalEarned
  #user_voterRank: Int
  ## Sum of user_challengerTotalEarned and user_voterTotalEarned
  #user_curatorTotalEarned: Int
  ## Position of curator in leaderboard according to user_curatorTotalEarned
  #user_curatorRank: Int
}

# Jannis: Source?
# type Parameter {
#   param_db: ID
#   param_key: ID
#   param_value: Int
# }
